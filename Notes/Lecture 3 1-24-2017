# Software Methodology - Inheritance: Private Fields/Static Members, Design Aspects of Static Members
## Lecture 3
### 24 January, 2017

### Inheritance - Private Fields
```java
public class Point{
  private int x,y;
  ...
}

public class ColoredPoint extends Point{
// x and y inherited HIDDEN
  public int getX(){ //override inherited getX()
    return x;
  }
}
```
* Will NOT compile becasue x is hidden(private)

```java
public class PointApp{
  public static void main(String[] args){
    ColoredPoint cp = new ColoredPoint(4,5,"blue");
    System.out.println(cp.x) //Will NOT compile beacuse x is hidden
    System.out.println(cp.getX()); //4
  }
}
```
* x id hidden
* Inherited getX() method is able to access the x field

### Inheritance - Static Members
* Static variable has been allocated statically so lifetime or "extent" extends across entire run of program

```java
public class Supercl{
  static int x;
  public static void m(){
    System.out.println("in class Supercl");
    
  }
}

public class Subcl extends Supercl{}

public class StaticTest{
  public static void main(String[] args){
    Supercl supercl = new Supercl();
    System.out.println(supercl.x);
    supercl.m(); //In subclass
    Subcl subcl = new Subcl();
    System.out.printn(subcl.x); //Inherited from Supercl
    subcl.m(); "in class Supercl" - inherited from Supercl
  }
}
```

* Inherited static fields are statically bound not dynamically

